import numpy as np
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split, KFold, LeaveOneOut, LeavePOut, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

diabetes = load_diabetes()
X, y = diabetes.data, diabetes.target

model = LinearRegression()

n_iterations = 5
train_test_split_scores = []
kfold_scores = []
leave_one_out_scores = []
leave_p_out_scores = []

for _ in range(n_iterations):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)

    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    test_score = mean_squared_error(y_test, y_pred)
    train_test_split_scores.append(test_score)

    kfold = KFold(n_splits=3, shuffle=True, random_state=None)
    kfold_scores.extend(-1 * cross_val_score(model, X, y, cv=kfold, scoring='neg_mean_squared_error'))

    loo = LeaveOneOut()
    leave_one_out_scores.extend(-1 * cross_val_score(model, X, y, cv=loo, scoring='neg_mean_squared_error'))

    p_values = [2, 5, 10]
    for p in p_values:
        lpo = LeavePOut(p=p)
        leave_p_out_scores.extend(-1 * cross_val_score(model, X, y, cv=lpo, scoring='neg_mean_squared_error'))

train_test_split_avg_score = np.mean(train_test_split_scores)
kfold_avg_score = np.mean(kfold_scores)
leave_one_out_avg_score = np.mean(leave_one_out_scores)
leave_p_out_avg_score = np.mean(leave_p_out_scores)

print(f"Train-Test Split Average MSE: {train_test_split_avg_score}")
print(f"K-Fold Cross Validation Average MSE: {kfold_avg_score}")
print(f"Leave-One-Out Cross Validation Average MSE: {leave_one_out_avg_score}")
print(f"Leave-P-Out Cross Validation Average MSE: {leave_p_out_avg_score}")
